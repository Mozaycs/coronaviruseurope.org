{"version":3,"sources":["geo/canada-provinces.geojson","geo/china-provinces.geojson","geo/us-states.geojson","utils.js","components/stats-panel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","countryFilter","colorScale","chroma","scale","defaultFill","getFillColorProvince","globalData","colorMax","metric","isoCode","resolution","provinceName","provinces","metricValue","rgb","onHoverProvince","data","setToolTip","object","x","y","properties","iso3","name","id","StatsPanel","useState","minimized","setMinimized","setMetric","total","active","confirmed","recovered","deaths","countryList","Object","entries","map","sort","c1","c2","metricList","keys","onClick","className","icon","LineChartOutlined","size","collapseBtn","type","CloseOutlined","style","color","title","extra","m","key","value","dataSource","renderItem","country","Item","countryRegion","numeral","format","initialViewState","longitude","latitude","zoom","pitch","bearing","fieldsToFilter","metrics","colorBreakDown","Array","apply","_","i","App","setStaticMap","geoJson","setGeoJson","setGlobalData","toolTipData","setResolution","setColorMax","useEffect","ReactGA","initialize","a","unixTime","Date","valueOf","Promise","all","axios","get","geoJSONData","globalDataList","globalDataMap","forEach","d","lastUpdate","provinceState","pick","window","console","log","error","loadData","layers","GeoJsonLayer","highlightColor","autoHighlight","getFillColor","includes","updateTriggers","pickable","onHover","stats","US_STATES","visible","CANADA_PROVINCES","CHINA_PROVINCES","margin","position","zIndex","Group","onChange","e","target","marginBottom","marginRight","whiteSpace","Button","controller","Style","width","height","ContextProvider","MapContext","Provider","ref","mapboxApiAccessToken","mapStyle","right","bottom","showCompass","Fragment","pointerEvents","left","top","backgroundColor","padding","borderRadius","minWidth","toLocaleString","_renderTooltip","display","justifyContent","colorscale","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.70b1a611.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/canada-provinces.386fab57.geojson\";","module.exports = __webpack_public_path__ + \"static/media/china-provinces.cf89f442.geojson\";","module.exports = __webpack_public_path__ + \"static/media/us-states.3fa0f7b5.geojson\";","import chroma from 'chroma-js';\n\n\nconst countryFilter = [\n  'USA',\n  'CAN',\n  'CHN',\n  'TWN',\n]\n\nconst colorScale = chroma.scale(['#fefee9', '#6c0101']);\nconst defaultFill = [0, 0, 0, 0];\n\nconst getFillColor = (globalData, colorMax, metric, isoCode, resolution) => {\n  if (resolution === 'province' && countryFilter.includes(isoCode)) {\n    return defaultFill;\n  }\n  if (globalData[isoCode] && globalData[isoCode][metric] > 0) {\n    const metricValue = globalData[isoCode][metric];\n    return [ ...colorScale(metricValue / colorMax).rgb(), 150 ];\n  }\n  return defaultFill;\n}\n\nconst getFillColorProvince = (globalData, colorMax, metric, isoCode, resolution, provinceName) => {\n  if (resolution === 'country' || !globalData[isoCode]) {\n    return defaultFill;\n  }\n  const { provinces } = globalData[isoCode];\n\n  if (provinces[provinceName] && provinces[provinceName][metric] > 0) {\n    const metricValue = provinces[provinceName][metric];\n    return [ ...colorScale(metricValue / colorMax).rgb(), 150 ];\n  }\n  return defaultFill;\n}\n\n\nconst onHover = (data, setToolTip, globalData, resolution) => {\n  if (data.object) {\n    const { x, y, object: { id, properties } } = data;\n    if (resolution === 'province' && countryFilter.includes(id)) {\n      return setToolTip(null);\n    }\n\n    const stats = globalData[id];\n    setToolTip({ name: properties.name, data: stats, id, x, y })\n  } else {\n    setToolTip(null);\n  }\n}\n\nconst onHoverProvince = (data, setToolTip, globalData, resolution) => {\n  if (data.object) {\n    const { x, y, object: { properties: { iso3, name } } } = data;\n    const provinces = globalData[iso3].provinces;\n    if (iso3 === 'CHN' && name === 'Taiwan') {\n      return setToolTip({ data: globalData['TWN'], x, y, id: name, name: iso3 })\n    }\n    if (!provinces[name]) {\n      return setToolTip(null);\n    }\n    setToolTip({ data: provinces[name], x, y, id: name, name: iso3 })\n  } else {\n    setToolTip(null);\n  }\n}\n\nexport {\n  getFillColor,\n  getFillColorProvince,\n  onHover,\n  onHoverProvince,\n}","import React, { useState } from 'react';\nimport { Statistic, Card, List, Button } from 'antd';\nimport { LineChartOutlined, CloseOutlined } from '@ant-design/icons';\nimport numeral from 'numeral'\n\nimport './stats-panel.css';\n\n\nexport default function StatsPanel ({ globalData }) {\n  const [minimized, setMinimized] = useState(false);\n  const [metric, setMetric] = useState('active');\n\n  const total = {\n    active: 0,\n    confirmed: 0,\n    recovered: 0,\n    deaths: 0,\n  }\n\n  const countryList = Object.entries(globalData).map(([iso3, data]) => {\n    total.confirmed += data.confirmed;\n    total.active += data.active;\n    total.recovered += data.recovered;\n    total.deaths += data.deaths;\n    return { ...data, iso3 };\n  }).sort((c1, c2) => c2[metric] - c1[metric]);\n  const metricList = Object.keys(total);\n\n  if (minimized) {\n    return (\n      <Button\n        onClick={() => setMinimized(false)}\n        className=\"minimized-button\"\n        icon={<LineChartOutlined />}\n        size='large'\n      />\n    )\n  }\n\n  const collapseBtn = (\n    <Button\n      onClick={() => setMinimized(true)}\n      type='link'\n      icon={<CloseOutlined />}\n      style={{ color: 'rgba(0, 0, 0, 0.45)'}}>\n    </Button>\n  );\n  return (\n    <Card title=\"Global Stats\" className='stats-panel' extra={collapseBtn}>\n      <div className='stats-group'>\n        {metricList.map(m => (\n          <div className='stats-wrapper' onClick={() => setMetric(m)} key={m}>\n            <Statistic\n              className={metric === m && 'activeMetric'}\n              title={m}\n              value={total[m]}\n            />\n          </div>\n        ))}\n      </div>\n      <List\n        className='stats-list'\n        dataSource={countryList}\n        renderItem={country => (\n          <List.Item className=\"stats-list-item\">\n            {country.countryRegion}\n            <span>{numeral(country[metric]).format('0,0')}</span>\n          </List.Item>\n        )}\n      />\n    </Card>\n  )\n}\n","import \"antd/dist/antd.css\"\nimport \"./App.css\"\n\nimport { BrowserView, MobileView } from \"react-device-detect\"\nimport {\n  _MapContext as MapContext,\n  NavigationControl,\n  StaticMap,\n} from \"react-map-gl\"\nimport React, { useEffect, useState } from \"react\"\nimport {\n  getFillColor,\n  getFillColorProvince,\n  onHover,\n  onHoverProvince,\n} from \"./utils\"\n\nimport CANADA_PROVINCES from \"./geo/canada-provinces.geojson\"\nimport CHINA_PROVINCES from \"./geo/china-provinces.geojson\"\nimport { Colorscale } from \"react-colorscales\"\nimport DeckGL from \"@deck.gl/react\"\nimport { GeoJsonLayer } from \"@deck.gl/layers\" // GeoJsonLayer\nimport { Radio } from \"antd\"\nimport ReactGA from \"react-ga\"\nimport StatsPanel from \"./components/stats-panel\"\nimport US_STATES from \"./geo/us-states.geojson\"\nimport axios from \"axios\"\nimport chroma from \"chroma-js\"\nimport { pick } from \"lodash\"\n\nconst MAPBOX_STYLE = \"mapbox://styles/jason-feng/ck7ryfd7y00xd1jqkfxb237mx\"\nconst MAPBOX_ACCESS_TOKEN =\n  \"pk.eyJ1IjoiamFzb24tZmVuZyIsImEiOiJjazdyeWJwNGMwNG1mM2hsOGRna2FjZDZwIn0.9VnUs6uEsVOnw_WqMUwQVg\" // jason\n// const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiaGF4emllIiwiYSI6ImNqZ2c2NWp3OTBxenAzM3FzeThydmZ0YncifQ.584ugILuKFfDPTxqyiO_0g' // borrow\nconst initialViewState = {\n  longitude: 0,\n  latitude: 26,\n  zoom: 2,\n  pitch: 0,\n  bearing: 0,\n}\nconst GEO_JSON_API =\n  \"https://raw.githubusercontent.com/haxzie/covid19-layers-api/master/data/layers/geo.json\"\nconst GLOBAL_API = \"https://covid19.mathdro.id/api/confirmed\"\nconst fieldsToFilter = [\n  \"provinceState\",\n  \"countryRegion\",\n  \"lastUpdate\",\n  \"lat\",\n  \"long\",\n  \"confirmed\",\n  \"recovered\",\n  \"deaths\",\n  \"active\",\n]\nconst metrics = [\"confirmed\", \"recovered\", \"deaths\", \"active\"]\nconst colorScale = chroma.scale([\"#fefee9\", \"#6c0101\"])\nconst colorBreakDown = Array.apply(null, Array(10)).map((_, i) =>\n  colorScale(i / 10)\n)\n\nfunction App() {\n  // eslint-disable-next-line no-unused-vars\n  const [staticMap, setStaticMap] = useState()\n  const [geoJson, setGeoJson] = useState()\n  // globalData: { <countryCode>: { provinceState, countryRegion, lastUpdate, lat, long, confirmed, recovered, deaths, active } }\n  const [globalData, setGlobalData] = useState({})\n  const [toolTipData, setToolTip] = useState() // { x, y, id, name, data: { confirmed, deaths, recovered } }\n  const [metric, setMetric] = useState(\"active\")\n  const [resolution, setResolution] = useState(\"province\")\n  const [colorMax, setColorMax] = useState(1000)\n\n  useEffect(() => {\n    ReactGA.initialize(\"UA-162018035-1\")\n    const loadData = async () => {\n      try {\n        const unixTime = new Date().valueOf()\n        const [\n          { data: geoJSONData },\n          { data: globalDataList },\n        ] = await Promise.all([\n          axios.get(`${GEO_JSON_API}?ts=${unixTime}`),\n          axios.get(GLOBAL_API),\n        ])\n\n        const globalDataMap = {}\n        globalDataList.forEach((d) => {\n          let country = globalDataMap[d.iso3]\n          if (!country) {\n            globalDataMap[d.iso3] = pick(d, [\n              \"countryRegion\",\n              \"lastUpdate\",\n              \"confirmed\",\n              \"recovered\",\n              \"deaths\",\n              \"active\",\n            ])\n            globalDataMap[d.iso3].provinces = {\n              [d.provinceState]: pick(d, fieldsToFilter),\n            }\n          } else {\n            metrics.forEach((m) => {\n              country[m] += d[m]\n            })\n            if (d.lastUpdate > country.lastUpdate) {\n              country.lastUpdate = d.lastUpdate\n            }\n            country.provinces[d.provinceState] = pick(d, fieldsToFilter)\n          }\n        })\n        window.globalDataMap = globalDataMap // for debugging purpose\n        console.log(globalDataMap)\n        setGlobalData(globalDataMap)\n        setGeoJson(geoJSONData)\n      } catch (err) {\n        console.error(err)\n      }\n    }\n    loadData()\n  }, [])\n\n  const _renderTooltip = () => {\n    if (!toolTipData) {\n      return null\n    }\n    const {\n      x,\n      y,\n      name,\n      id,\n      data: {\n        confirmed = 0,\n        deaths = 0,\n        recovered = 0,\n        active = 0,\n        lastUpdate = null,\n      } = {},\n    } = toolTipData\n    return (\n      <React.Fragment>\n        <BrowserView>\n          <div\n            style={{\n              position: \"fixed\",\n              zIndex: 5,\n              pointerEvents: \"none\",\n              left: x,\n              top: y,\n              backgroundColor: \"white\",\n              padding: \"1rem\",\n              borderRadius: \"4px\",\n              minWidth: \"200px\",\n            }}\n          >\n            <h2 style={{ margin: \"0 0 1rem 0\" }}>\n              {name} - {id}\n            </h2>\n            <div>active: {active}</div>\n            <div>confirmed: {confirmed}</div>\n            <div>deaths: {deaths}</div>\n            <div>recovered: {recovered}</div>\n            {lastUpdate && (\n              <div>last update: {new Date(lastUpdate).toLocaleString()}</div>\n            )}\n          </div>\n        </BrowserView>\n        <MobileView>\n          <div\n            style={{\n              position: \"absolute\",\n              zIndex: 5,\n              left: \"1rem\",\n              right: \"1rem\",\n              bottom: \"1rem\",\n              backgroundColor: \"white\",\n              padding: \"1rem\",\n              borderRadius: \"4px\",\n            }}\n          >\n            <h2 style={{ margin: \"0 0 1rem 0\" }}>\n              {name} - {id}\n            </h2>\n            <div>active: {active}</div>\n            <div>confirmed: {confirmed}</div>\n            <div>deaths: {deaths}</div>\n            <div>recovered: {recovered}</div>\n            {lastUpdate && (\n              <div>last update: {new Date(lastUpdate).toLocaleString()}</div>\n            )}\n          </div>\n        </MobileView>\n      </React.Fragment>\n    )\n  }\n\n  const onResolutionChange = ({ target: { value } }) => {\n    setResolution(value)\n    if (value === \"country\") {\n      setColorMax(15000)\n    } else {\n      setColorMax(1000)\n    }\n  }\n\n  /* rendering */\n  const layers = [\n    new GeoJsonLayer({\n      id: \"countries-geo-json\",\n      data: geoJson,\n      highlightColor: [0, 0, 0, 50],\n      autoHighlight: true,\n      getFillColor: (d) =>\n        getFillColor(globalData, colorMax, metric, d.id, resolution),\n      updateTriggers: {\n        getFillColor: [globalData, metric, resolution],\n      },\n\n      /* interact */\n      pickable: true,\n      onHover: (data) => onHover(data, setToolTip, globalData, resolution),\n      onClick: (data) => {\n        console.log(\"clicked:\", data)\n        console.log(\"country data:\", globalData[data.object.id])\n      },\n    }),\n    new GeoJsonLayer({\n      id: \"us-states-geo-json\",\n      data: US_STATES,\n      highlightColor: [0, 0, 0, 50],\n      autoHighlight: true,\n      visible: resolution === \"province\",\n      getFillColor: (d) =>\n        getFillColorProvince(\n          globalData,\n          colorMax,\n          metric,\n          \"USA\",\n          resolution,\n          d.properties.name\n        ),\n      updateTriggers: {\n        getFillColor: [globalData, metric, resolution],\n      },\n      pickable: true,\n      onHover: (data) =>\n        onHoverProvince(data, setToolTip, globalData, resolution),\n      onClick: (data) => {\n        console.log(\"clicked:\", data)\n      },\n    }),\n    new GeoJsonLayer({\n      id: \"canada-provinces-geo-json\",\n      data: CANADA_PROVINCES,\n      highlightColor: [0, 0, 0, 50],\n      autoHighlight: true,\n      visible: resolution === \"province\",\n      getFillColor: (d) =>\n        getFillColorProvince(\n          globalData,\n          colorMax,\n          metric,\n          \"CAN\",\n          resolution,\n          d.properties.name\n        ),\n      updateTriggers: {\n        getFillColor: [globalData, metric, resolution],\n      },\n      pickable: true,\n      onHover: (data) =>\n        onHoverProvince(data, setToolTip, globalData, resolution),\n      onClick: (data) => {\n        console.log(\"clicked:\", data)\n      },\n    }),\n    new GeoJsonLayer({\n      id: \"china-provinces-geo-json\",\n      data: CHINA_PROVINCES,\n      highlightColor: [0, 0, 0, 50],\n      autoHighlight: true,\n      visible: resolution === \"province\",\n      getFillColor: (d) =>\n        getFillColorProvince(\n          globalData,\n          colorMax,\n          metric,\n          \"CHN\",\n          resolution,\n          d.properties.name\n        ),\n      updateTriggers: {\n        getFillColor: [globalData, metric, resolution],\n      },\n      pickable: true,\n      onHover: (data) =>\n        onHoverProvince(data, setToolTip, globalData, resolution),\n      onClick: (data) => {\n        console.log(\"clicked:\", data)\n      },\n    }),\n  ]\n\n  return (\n    <div>\n      <div style={{ margin: \"1rem\", position: \"absolute\", zIndex: 2 }}>\n        <Radio.Group\n          value={metric}\n          onChange={(e) => setMetric(e.target.value)}\n          style={{\n            marginBottom: \"1rem\",\n            marginRight: \"1rem\",\n            whiteSpace: \"nowrap\",\n          }}\n        >\n          <Radio.Button value=\"active\">Active</Radio.Button>\n          <Radio.Button value=\"confirmed\">Confirmed</Radio.Button>\n          <Radio.Button value=\"deaths\">Deaths</Radio.Button>\n          <Radio.Button value=\"recovered\">Recovered</Radio.Button>\n        </Radio.Group>\n        <Radio.Group value={resolution} onChange={onResolutionChange}>\n          <Radio.Button value=\"country\">Country</Radio.Button>\n          <Radio.Button value=\"province\">Province</Radio.Button>\n        </Radio.Group>\n      </div>\n      <DeckGL\n        initialViewState={initialViewState}\n        controller={true}\n        layers={layers}\n        Style={{ width: \"100vw\", height: \"100vh\" }}\n        ContextProvider={MapContext.Provider}\n      >\n        <StaticMap\n          ref={setStaticMap}\n          width=\"100%\"\n          height=\"100%\"\n          mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\n          mapStyle={MAPBOX_STYLE}\n        />\n        <div\n          style={{\n            position: \"absolute\",\n            right: \"1rem\",\n            bottom: \"6rem\",\n            zIndex: 10,\n          }}\n        >\n          <NavigationControl showCompass={false} />\n        </div>\n      </DeckGL>\n      {_renderTooltip()}\n      <StatsPanel globalData={globalData} />\n      <div\n        style={{\n          zIndex: 3,\n          position: \"absolute\",\n          bottom: \"1.5rem\",\n          right: \"1rem\",\n          width: \"250px\",\n        }}\n      >\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n          <span>0</span>\n          <span>number of {metric} cases</span>\n          <span>{colorMax}</span>\n        </div>\n        <Colorscale\n          colorscale={colorBreakDown}\n          onClick={() => {}}\n          width=\"150px\"\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}